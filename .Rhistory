setwd("C:/Users/jjborrelli/Desktop/GitHub/dynamic-subgraphs")
data_TL_zoop <- read.csv("./data/cascade_project__zooplankton.csv")
head(data_TL_zoop)
data_TL_zoop <- subset(data_TL_zoop, data_TL_zoop$lakeid=="T")
length(unique(data_TL_zoop$taxon_name))
sort(unique(data_TL_zoop$taxon_name))
sort(table(data_TL_zoop$taxon_name))
zoop_names <- unique(data_TL_zoop$taxon_name)
write.csv(zoop_names, file = "data/TL_zoop_species.csv")
data_TL_zoop$date <- as.Date(data_TL_zoop$sampledate)
temp_data <- subset(data_TL_zoop, taxon_name=="Nauplii")
temp <- ggplot(temp_data, aes(date,density))
temp <- temp + geom_point() + geom_line()
temp <- temp + ylab("Density")
temp <- temp + xlab("Date")
temp <- temp + theme_bw(base_size=18)
temp <- temp + scale_x_date(labels=date_format("%Y"),breaks=date_breaks("year"))
temp <- temp + theme(axis.text.x = element_text(angle=315,hjust=0)) # fix here
temp
library(ggplot2)
library(scales)
temp <- ggplot(temp_data, aes(date,density))
temp <- temp + geom_point() + geom_line()
temp <- temp + ylab("Density")
temp <- temp + xlab("Date")
temp <- temp + theme_bw(base_size=18)
temp <- temp + scale_x_date(labels=date_format("%Y"),breaks=date_breaks("year"))
temp <- temp + theme(axis.text.x = element_text(angle=315,hjust=0)) # fix here
temp
data_TL_zoop
head(data_TL_zoop)
?intersect
library(cheddar)
library(magrittr)
library(taxize)
library(igraph)
## FUNCTIONS
### Counting triads in a list of networks (igraph graph objects)
motif_counter <- function(graph.lists){
require(igraph)
if(!is.list(graph.lists)){
stop("The input should be a list of graph objects")
}
triad.count <- lapply(graph.lists, triad.census)
triad.matrix <- matrix(unlist(triad.count), nrow = length(graph.lists), ncol = 16, byrow = T)
colnames(triad.matrix) <- c("empty", "single", "mutual", "s5", "s4", "s1", "d4",
"d3", "s2", "s3","d8", "d2", "d1", "d5", "d7", "d6")
triad.df <- as.data.frame(triad.matrix)
motif.data.frame <- data.frame(s1 = triad.df$s1, s2 = triad.df$s2, s3 = triad.df$s3, s4 = triad.df$s4,
s5 = triad.df$s5, d1 = triad.df$d1, d2 = triad.df$d2, d3 = triad.df$d3, d4 = triad.df$d4,
d5 = triad.df$d5, d6 = triad.df$d6, d7 = triad.df$d7, d8 = triad.df$d8)
return(motif.data.frame)
}
### Jacknife species to get list of subgraphs
listROLES <- function(x){
lam <- list()
for(i in 1:nrow(x)){
lam[[i]] <- x[-i,-i]
}
qgs <- lapply(lam, graph.adjacency)
m.each <- motif_counter(qgs)
m.all <- motif_counter(list(graph.adjacency(x)))
m2 <- matrix(nrow = nrow(m.each), ncol = 13)
for(i in 1:nrow(m.each)){
m2[i,] <- as.numeric(m.all - m.each[i,])
}
return(as.data.frame(m2))
}
## Data
data(TL84)
data(TL86)
### Properties of the dataset
NPS(TL84)
NPS(TL86)
PlotWebByLevel(TL84)
PlotWebByLevel(TL86)
pmTL84 <- PredationMatrix(TL84)
pmTL86 <- PredationMatrix(TL86)
### Count subgraphs
g84 <- PredationMatrix(TL84) %>% graph.adjacency()
g86 <- PredationMatrix(TL86) %>% graph.adjacency()
mots84 <- PredationMatrix(TL84) %>% graph.adjacency() %>% list() %>% motif_counter()
mots86 <- PredationMatrix(TL86) %>% graph.adjacency() %>% list() %>% motif_counter()
### list subgraph participation
s.part84 <- listROLES(pmTL84)
rownames(s.part84) <- rownames(NPS(TL84))
colnames(s.part84) <- colnames(mots84)
s.part86 <- listROLES(pmTL86)
rownames(s.part86) <- rownames(NPS(TL86))
colnames(s.part86) <- colnames(mots86)
degs84 <- data.frame(inD = InDegree(TL84), outD = OutDegree(TL84))
degs86 <- data.frame(inD = InDegree(TL86), outD = OutDegree(TL86))
read.csv("./data/TL_empirical_species.csv")
read.csv("./data/TL_empirical_species.csv", row.names = 1)
spp <- read.csv("./data/TL_empirical_species.csv", row.names = 1)
same <- rownames(s.part84) %in% rownames(s.part86)
rownames(s.part86) == rownames(s.part84)[same]
s.part86[rownames(s.part84[same, ]), ] - s.part84[same, ]
same2<- intersect(rownames(s.part86), rownames(s.part84))
sp.names <- graph.union(g84, g86) %>% get.adjacency(sparse = F) %>% colnames
sp.names
sp.names %in$ spp
sp.names %in% spp
load("./data/TL_species_class.Rdata")
sp.names $in$ zoop_names
sp.names %in% zoop_names
which(sp.names %in% zoop_names)
zoo.test <- which(sp.names %in% zoop_names)
sp.names[zoo.test]
zoop_names[zoop_names == sp.names[zoo.test]]
zoop_names
zoo.test
TLg <- graph.union(g84, g86)
library(NetIndices)
TrophInd(get.adjacency(TLg, sparse = F))
TrophInd(get.adjacency(TLg, sparse = F))[zoo.test]
TrophInd(get.adjacency(TLg, sparse = F))[zoo.test,]
length(zoo.test)
read.csv("./time_series_stats/ts_stats_zoop_all_yr.csv", row.names = 1)
zoop.stat <- read.csv("./time_series_stats/ts_stats_zoop_all_yr.csv", row.names = 1)
row.names(zoop.stat)
TL.troph <- TrophInd(get.adjacency(TLg, sparse = F))[zoo.test,]
intersect(row.names(zoop.stat), row.names(Tl.troph))
TL.troph <- TrophInd(get.adjacency(TLg, sparse = F))[zoo.test,]
intersect(row.names(zoop.stat), row.names(TL.troph))
inDAT <- intersect(row.names(zoop.stat), row.names(TL.troph))
TL.troph[inDAT,]
zoop.stat[inDAT,]
plot(TL.troph[inDAT,], zoop.stat[inDAT,]$cv_dens)
plot(TL.troph[inDAT,]$OI, zoop.stat[inDAT,]$cv_dens)
plot(TL.troph[inDAT,]$TL, zoop.stat[inDAT,]$cv_dens)
aTL <- get.adjacency(TL.g)
aTL <- get.adjacency(TLg)
listROLES(aTL)
rolTL<- listROLES(aTL)
aTL
rownames(aTL)
inDAT
intersect(inDAT, rownames(aTL))
roleNAMES <- intersect(inDAT, rownames(aTL))
rolTL[roleNAMES,]
roleNAMES <- which(rownames(aTL) %in% inDAT)
roleNAMES
length(inDAT)
length(roleNAMES)
rolTL(roleNAMES)
rolTL[roleNAMES,]
TLroles <- as.matrix(rolTL[roleNAMES,])
lm(zoop.stat[inDAT,]$cv_dens~TLroles)
summary(lm(zoop.stat[inDAT,]$cv_dens~TLroles))
TLroles
evcent(TLg)
evcent(TLg)$vector
evcent(TLg)$vector[roleNAMES]
inDAT
rownames(aTL) %in% inDAT
rownames(aTL)[roleNAMES]
sort(rownames(aTL)[roleNAMES])
roleNAMES <- which(sort(rownames(aTL)) %in% inDAT)
rownames(aTL)[roleNAMES]
sort(rownames(aTL))
sort(rownames(aTL)) %in% inDAT
roleNAMES <- which(rownames(aTL) %in% inDAT)
sort(rownames(aTL)[roleNAMES])
ordNAMES <- sort(rownames(aTL)[roleNAMES])
TLroles <- as.matrix(rolTL[ordNAMES,])
TLroles
ordNAMES
rolTL
rownames(rolTL) <- rownames(aTL)
roleNAMES <- sort(rownames(aTL) %in% inDAT)
roleNAMES
roleNAMES <- which(rownames(aTL) %in% inDAT)
ordNAMES <- sort(rownames(aTL)[roleNAMES])
TLroles <- as.matrix(rolTL[ordNAMES,])
TLroles
evcent(TLg)$vector[ordnames]
evcent(TLg)$vector[ordNAMES]
inDAT
NPS(TLg)
V(Tlg)
V(TLg)
names(V(TLg))
V(TLg)[1]
V(TLg)[2]
names(TLg)
get.adjacency(TLg)
library(cheddar)
library(magrittr)
library(taxize)
library(igraph)
library(NetIndices)
motif_counter <- function(graph.lists){
require(igraph)
if(!is.list(graph.lists)){
stop("The input should be a list of graph objects")
}
triad.count <- lapply(graph.lists, triad.census)
triad.matrix <- matrix(unlist(triad.count), nrow = length(graph.lists), ncol = 16, byrow = T)
colnames(triad.matrix) <- c("empty", "single", "mutual", "s5", "s4", "s1", "d4",
"d3", "s2", "s3","d8", "d2", "d1", "d5", "d7", "d6")
triad.df <- as.data.frame(triad.matrix)
motif.data.frame <- data.frame(s1 = triad.df$s1, s2 = triad.df$s2, s3 = triad.df$s3, s4 = triad.df$s4,
s5 = triad.df$s5, d1 = triad.df$d1, d2 = triad.df$d2, d3 = triad.df$d3, d4 = triad.df$d4,
d5 = triad.df$d5, d6 = triad.df$d6, d7 = triad.df$d7, d8 = triad.df$d8)
return(motif.data.frame)
}
### Jacknife species to get list of subgraphs
listROLES <- function(x){
lam <- list()
for(i in 1:nrow(x)){
lam[[i]] <- x[-i,-i]
}
qgs <- lapply(lam, graph.adjacency)
m.each <- motif_counter(qgs)
m.all <- motif_counter(list(graph.adjacency(x)))
m2 <- matrix(nrow = nrow(m.each), ncol = 13)
for(i in 1:nrow(m.each)){
m2[i,] <- as.numeric(m.all - m.each[i,])
}
return(as.data.frame(m2))
}
## Data
data(TL84)
data(TL86)
g84 <- PredationMatrix(TL84) %>% graph.adjacency()
g86 <- PredationMatrix(TL86) %>% graph.adjacency()
sp.names <- graph.union(g84, g86) %>% get.adjacency(sparse = F) %>% colnames
spp <- read.csv("./data/TL_empirical_species.csv", row.names = 1)
TLg <- graph.union(g84, g86)
TL.troph <- TrophInd(get.adjacency(TLg, sparse = F))
zoop.stat <- read.csv("./time_series_stats/ts_stats_zoop_all_yr.csv", row.names = 1)
zoop.stat
intersect(row.names(zoop.stat), row.names(TL.troph))
inDAT <- intersect(row.names(zoop.stat), row.names(TL.troph))
TL.troph[inDAT,]
dim(TL.troph[inDAT,])
zoop.stat[inDAT,]
cbind(zoop.stat, TL.troph)
cbind(zoop.stat[inDAT,], TL.troph[inDAT,])
inDAT
evcent(TLg)$vector[inDAT]
degree(graph = TLg, V = V(TLg))
degree(graph = TLg, mode = "in")
indeg <- degree(graph = TLg, mode = "in")[inDAT]
indeg
outdeg <- degree(graph = TLg, mode = "out")[inDAT]
betweenness(TLg, V = V(TLg))
betweenness(TLg)
betweenness(TLg)[inDAT]
vbet <- betweenness(TLg)[inDAT]
length(vbet)
evc <- evcent(graph = TLg)[inDAT]
evc
evcent(graph = TLg)
evc <- evcent(graph = TLg)$vector[inDAT]
evc
page.rank(graph = TLg)
page.rank(graph = TLg)$vector[inDAT]
subgraph.centrality(graph = TLg)
subcent <- subgraph.centrality(graph = TLg)[inDAT]
rownames(TL.troph) == rownames(aTL)
aTL <- get.adjacency(TLg)
rownames(TL.troph) == rownames(aTL)
row.names(TL.troph) == row.names(aTL)
zooDAT <- cbind(zoop.stat[inDAT], TL.troph, indeg, outdeg, vbet, evc, pr, subcent)
zooDAT <- cbind(zoop.stat[inDAT,], TL.troph, indeg, outdeg, vbet, evc, pr, subcent)
pr <- page.rank(graph = TLg)$vector[inDAT]
zooDAT <- cbind(zoop.stat[inDAT,], TL.troph, indeg, outdeg, vbet, evc, pr, subcent)
TL.troph
TL.troph <- TrophInd(aTL)[inDAT]
aTL <- get.adjacency(TLg, sparse = F)
TL.troph <- TrophInd(aTL)[inDAT]
TL.troph <- TrophInd(aTL)[inDAT,]
zooDAT <- cbind(zoop.stat[inDAT,], TL.troph, indeg, outdeg, vbet, evc, pr, subcent)
zooDAT
plot(avg_dens~indeg, data = zooDAT)
plot(avg_dens~indeg, data = zooDAT, log = "y")
plot(avg_dens~indeg, data = zooDAT, log = "x\y")
plot(avg_dens~indeg, data = zooDAT, log = "xy")
plot(avg_dens~indeg, data = zooDAT, log = "y")
plot(avg_dens~outdeg, data = zooDAT, log = "y")
plot(avg_dens~outdeg, data = TL, log = "y")
plot(avg_dens~TL, data = zooDAT, log = "y")
plot(avg_dens~OI, data = zooDAT, log = "y")
prcomp(zooDAT)
zooDAT
prcomp(zooDAT[-10, ])
biplot(prcomp(zooDAT[-10, ]))
summary(prcomp(zooDAT[-10, ]))
